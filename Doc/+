\documentclass[a4paper]{scrartcl}

\usepackage[english, portuguese]{babel} %
%\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}	%utf8 encoding
\usepackage[colorlinks]%, %Anstatt Boxen um Links, diese einfärben
        	{hyperref}		%Anklickbare Links

\interfootnotelinepenalty=10000 % this prevents footnotes from being split across multiple pages
%\usepackage{
%	amsmath,                 % improves quality of formulas
%   amssymb,                 % mathematical symbols
%   amsfonts,                % mathematical fonts
%   amsthm,                  % macros for theorems, lemmas, etc.
%   graphicx,                % needed to include graphics and images
%}
\usepackage{listings}
\usepackage{color}

\newcommand{\totype}{\(\to\;\)}
\newcommand{\quantum}{\emph{quantum}}
\newcommand{\segundo}{2\ensuremath{^\circ}}
\newcommand{\code}[1]{\lstinputlisting[basicstyle=\ttfamily\scriptsize,language=C]{codes/#1}}

\title{Escalonador Diferente}
\subtitle{Projeto Fase 02}
\author{Cassius Puodzius, Lucas Baraças, Marcelo Risse}
\date{\segundo~Quadrimentre 2013\\\today}


%%% START OF DOCUMENT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\maketitle

\begin{abstract}
\end{abstract}

\tableofcontents
\pagebreak[4]

\section{Introdução}

No projeto anterior, a equipe alterou o init e criou o processo pai e filho que imprimiam mensagens em loops infinitos, porém as impressões eram feitas em blocos, durante um tempo que o processo pai ficava imprimindo mensagens e um tempo que o processo filho ficava imprimindo suas mensagens. O printf faz uso da system call write; porém quando o write é chamado o processo não é chaveado. O objetivo dessa fase, então, é alterar o kernel do linux 2.6 de forma que o escalonador troque de processo na chamada da system call write.

\section{Escalonamento do Linux}

O escalonamento é utilizado para possibilitar a execução de diversos processos em uma (ou mais) CPU simultaneamente. Para tanto, o escalonador utiliza o compartilhamento da CPU no tempo, sendo que cada processo dispõe de uma certa fração desse tempo (\quantum) para a sua execução. Ao término do processo, ao final de seu \quantum ou após o tratamento de uma interrupção (este último caso se aplica ao Linux em especial), o escalonador é chamado, a fim de determinar qual o próximo deverá ser executado. Essa escolha é baseada no tipo da fila de execução a ser escalonada e nas prioridades dos processos nessas fila, sendo que processos de tempo-real possuem maior prioridade sobre os demais, bem como os processos de maior prioridades são escalonados primeiro.

\subsection{Prioridades de Processos}

As prioridadade em processos no Linux podem ser de dois tipo:

\begin{itemize}
	\item[Estática]: Uma prioridade é atribuída diretamente ao processo.
	\item[Dinâmica]: A prioridade é calculada a partir de uma estimativa de tempo de execução do processe no próximo \quantum e da parcela de tempo que o processo executou no seu \quantum passado (maior contribuição no cálculo de prioridade).
\end{itemize}

O processos amarrados à CPU (\emph{CPU-Bound}) tendem a ter prioridades mais altas do que processos amarrados a Entrada-Saída (\emph{IO-Bound}), justamente por passarem uma parcela maior do tempo em execução nos seus \quantum{s}. A prioridade dos processos dependem também do tipo do processo, sendo que, de fato, processos de tempo-real e os demais processos possuem filas de execução diferentes (\emph{struct cfs\_rq} e \emph{struct rt\_rq} respectivamente).

\subsection{Política de Escalonamento}

Define a maneira com a qual os processos serão escalonados, dependendo do estado do sistema e das características dos processos. Processos podem ser preeptivos ou não preemptivos, definindo se o processo permitirá ser interrompido durante a execução ou não. Exemplos de políticas de escalonamento podem ser FIFO, ou seja, uma fila de execução que escolhe para executar sempre o processo que esta há mais tempo na fila, ou Round Robin, que funciona por meio de um token que é passado de processo em processo, permitindo-o utilizar a CPU (uma vez que os processos são interrompidos ao expirar o tempo de uso do token, essa política é um exemplo de política que não pode ser utilizada com processos não-preemptivos).

\section{Alteração do Kernel}

O gerenciador do escalonamento está implementado em sched.c, aonde, após nos certificarmos que o write invoca o escalonador utilizando o GDB com o QEMU, começamos a inspecionar o código do kernel. 

\code{sched_schedule.c}

No final do trecho do sched.c aqui colocado, temos que o escalonador vai escolher o processo next para rodar, mediante a chamada "\emph{next = pick\_next\_task(rq);}".

\code{sched_pick_next.c}

Neste trecho observamos que na maioria das vezes haveremos apenas processos fair, e que nesse caso, o próximo processo é escolhido a partir da fila de processos fair (i.e. cfs\_rq). Podemos observar o que foi dito acima a partir de \emph{if (likely(rq->nri\_running == rq->cfs.nr\_running))}, onde likely é uma macro para auxiliar o compilador a dispor essa instrução na memória.

Em sched\_fair.c está implementado o baixo-nível em termos do escalonador. Nesse código é tratada a manipulação do processos nas suas filas de execução, bem como todo o gerenciamento (a baixo-nível) dos processos. Em especial, procuramos como funciona a função picki\_next\_task\_fair.c, para que possamos alterar o Kenel,

\end{document}


